<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Flappy Bird</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    canvas { background: skyblue; display: block; margin: auto; }
    #score { 
      position: absolute; 
      top: 10px; left: 50%; 
      transform: translateX(-50%); 
      font-family: sans-serif; 
      font-size: 24px; 
      font-weight: bold; 
      color: #fff; 
      text-shadow: 1px 1px 2px #000;
    }
  </style>
</head>
<body>
  <div id="score">Score: 0</div>
  <canvas id="game" width="320" height="480"></canvas>

  <script>
    const canvas = document.getElementById("game");
    const ctx = canvas.getContext("2d");
    const scoreEl = document.getElementById("score");

    let frames = 0;
    let score = 0;
    let best = 0;
    const gravity = 0.25;
    const jump = 4.6;

    const bird = {
      x: 50,
      y: 150,
      w: 30,
      h: 30,
      velocity: 0,
      draw() {
        ctx.fillStyle = "yellow";
        ctx.fillRect(this.x, this.y, this.w, this.h);
      },
      flap() {
        this.velocity = -jump;
      },
      update() {
        this.velocity += gravity;
        this.y += this.velocity;

        if (this.y + this.h >= canvas.height) {
          resetGame();
        }
      }
    };

    const pipes = [];
    const pipeWidth = 50;
    const pipeGap = 100;

    function drawPipe(pipe) {
      ctx.fillStyle = "green";
      ctx.fillRect(pipe.x, 0, pipeWidth, pipe.top);
      ctx.fillRect(pipe.x, pipe.top + pipeGap, pipeWidth, canvas.height);
    }

    function resetGame() {
      pipes.length = 0;
      score = 0;
      bird.y = 150;
      bird.velocity = 0;
    }

    function updatePipes() {
      if (frames % 90 === 0) {
        const top = Math.floor(Math.random() * 200) + 50;
        pipes.push({ x: canvas.width, top });
      }

      pipes.forEach(pipe => {
        pipe.x -= 2;

        // collision
        if (
          bird.x < pipe.x + pipeWidth &&
          bird.x + bird.w > pipe.x &&
          (bird.y < pipe.top || bird.y + bird.h > pipe.top + pipeGap)
        ) {
          resetGame();
        }

        // scoring
        if (pipe.x + pipeWidth === bird.x) {
          score++;
        }
      });

      pipes.filter(p => p.x + pipeWidth > 0);
    }

    function drawPipes() {
      pipes.forEach(drawPipe);
    }

    function loop() {
      frames++;
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      bird.update();
      updatePipes();

      drawPipes();
      bird.draw();

      scoreEl.textContent = `Score: ${score}`;

      requestAnimationFrame(loop);
    }

    document.addEventListener("keydown", bird.flap.bind(bird));
    document.addEventListener("click", bird.flap.bind(bird));
